# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hqun6TLRIMyXTfKkA99BgBASyQkdUJjG
"""

# Tratamiento de datos
# ==============================================================================
import pandas as pd
import numpy as np

# Gráficos
# ==============================================================================
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns
from mlxtend.plotting import plot_decision_regions

# Preprocesado y modelado
# ==============================================================================
from sklearn.svm import SVC, SVR
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, mean_squared_error, mean_absolute_error

# Configuración matplotlib
# ==============================================================================
plt.rcParams['image.cmap'] = "bwr"
#plt.rcParams['figure.dpi'] = "100"
plt.rcParams['savefig.bbox'] = "tight"
style.use('ggplot') or plt.style.use('ggplot')

# Configuración warnings
# ==============================================================================
import warnings
warnings.filterwarnings('ignore')

from google.colab import files #import csv file(Dataset) 
files.upload()

data = pd.read_csv('A10.csv')
data_original=data.copy()
# crear una máscara booleana para filas donde el valor en la columna 1 es 0
mask = data['Ingesta'] == 0
# crear un nuevo DataFrame sin las filas que cumplen la condición
data = data.loc[~mask]

# imprimir DataFrame filtrado
print('DataFrame Original:')
print(data_original.shape)
print('DataFrame filtrado:')
print(data.shape)
data.head(20)

#datos=pd.read_csv('A1.csv', encoding='utf-8', usecols=['Glucosa','Insulina','Ingesta'])

X = data.iloc[0:585, 3:5].values #Tomo solo glucosa e insulina y dejo las dos últimas ingestas para validación
y = data.iloc[0:585, -1].values #como labels tomo carbohidratos y dejo las dos últimas ingestas para validació
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
data.head(10)
print(X.shape)

"""modelo 1"""

regressor = SVR(kernel='rbf', degree=3, gamma='scale', coef0=0.0, tol=0.001, C=20000, epsilon=0.1, shrinking=True, cache_size=200, verbose=False, max_iter=-1)
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
print('Error cuadrático medio en el conjunto de prueba:', mse)
print('Error absoluto medio en el conjunto de prueba:', mae)

# Predicciones test
# ==============================================================================
predicciones = regressor.predict(X_test)
#predicciones

#data = pd.read_csv('A1_p.csv')#predecir de otro paciente

N=40 #Número de ingesta

X_new = data.iloc[(N-1)*15:N*15, 3:5].values #Tomo la penúltima ingesta
y_new = data.iloc[(N-1)*15:N*15, -1].values #Tomo la penúltima ingesta
#print(X_new)

y_pred = regressor.predict(X_new)
y_pred

y_new

y_pred1=np.concatenate((y_pred,[0]*10),axis=0)
x_in=np.concatenate((y_new,[0]*10),axis=0)

#plt.title("Gráfico de predicciones") # agrega un título a la gráfica
a="Predicción ingesta " + str(N)
plt.title("Gráfica de ingesta de carbohidratos", loc='Center') # alinea el título a la izquierda
plt.tight_layout() # ajusta el espaciado de la gráfica
plt.plot(y_pred1,label=a)
plt.plot(x_in,label='Real')
plt.legend()
plt.xlabel("Tiempo [min]") # título del eje x
plt.ylabel("Cantidad [g]") # título del eje y
plt.show()











